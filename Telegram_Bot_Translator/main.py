import os
import sys
import asyncio
import logging
from collections import defaultdict

from dotenv import load_dotenv
from deep_translator import GoogleTranslator
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_TARGET_LANG = os.getenv("DEFAULT_TARGET_LANG", "en")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is missing. Put it into .env")

user_target_lang = defaultdict(lambda: DEFAULT_TARGET_LANG)
user_menu_on = defaultdict(lambda: False)

LANG_CHOICES = [
    ("English", "en"),
    ("–†—É—Å—Å–∫–∏–π", "ru"),
    ("“ö–∞–∑–∞“õ—à–∞", "kk"),
    ("T√ºrk√ße", "tr"),
    ("Deutsch", "de"),
    ("Espa√±ol", "es"),
    ("Fran√ßais", "fr"),
    ("‰∏≠Êñá", "zh-cn"),
]


def make_inline_lang_keyboard() -> InlineKeyboardMarkup:
    rows, row = [], []
    for i, (title, code) in enumerate(LANG_CHOICES, start=1):
        row.append(InlineKeyboardButton(title, callback_data=f"setlang:{code}"))
        if i % 3 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(rows)


def make_reply_menu(selected: str) -> ReplyKeyboardMarkup:
    row1 = ["en", "ru", "kk"]
    row2 = ["tr", "de", "es"]
    row3 = ["fr", "zh-cn", f"current:{selected}"]
    return ReplyKeyboardMarkup([row1, row2, row3], resize_keyboard=True)

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    tgt = user_target_lang[uid]
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç ‚Äî –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ.\n"
        f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: {tgt}\n\n"
        "–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫: /setlang <–∫–æ–¥> –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n"
        "–°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤: /langs\n"
        "–í–∫–ª—é—á–∏—Ç—å –±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏: /menu  ¬∑  –í—ã–∫–ª—é—á–∏—Ç—å: /menu_off\n"
    )
    # –ë–µ–∑ MarkdownV2 ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ
    await update.message.reply_text(text, reply_markup=make_inline_lang_keyboard())


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞\n"
        "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/setlang <–∫–æ–¥> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setlang en)\n"
        "/langs ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–¥—ã —è–∑—ã–∫–æ–≤\n"
        "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —è–∑—ã–∫–∞–º–∏\n"
        "/menu_off ‚Äî —É–±—Ä–∞—Ç—å –±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–≤ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫."
    )


async def langs_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    codes = ", ".join(sorted({code for _, code in LANG_CHOICES}))
    await update.message.reply_text(
        f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–¥—ã —è–∑—ã–∫–æ–≤: {codes}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setlang <–∫–æ–¥>.",
        reply_markup=make_inline_lang_keyboard(),
    )


async def setlang_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setlang en",
            reply_markup=make_inline_lang_keyboard(),
        )
        return
    code = context.args[0].lower()
    user_target_lang[uid] = code

    reply = make_reply_menu(code) if user_menu_on[uid] else None
    await update.message.reply_text(
        f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {code}",
        reply_markup=reply or make_inline_lang_keyboard(),
    )


async def menu_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_menu_on[uid] = True
    tgt = user_target_lang[uid]
    await update.message.reply_text(
        "üìå –ë–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã.",
        reply_markup=make_reply_menu(tgt),
    )


async def menu_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_menu_on[uid] = False
    await update.message.reply_text(
        "üóëÔ∏è –ë–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã—Ç—ã.",
        reply_markup=ReplyKeyboardRemove(),
    )


async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not query.data:
        return

    if query.data.startswith("setlang:"):
        code = query.data.split(":", 1)[1]
        uid = query.from_user.id
        user_target_lang[uid] = code

        await query.edit_message_text(
            text=f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {code}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.",
            reply_markup=make_inline_lang_keyboard(),
        )


async def translate_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    target = user_target_lang[uid]
    src_text = update.message.text or ""

    normalized = src_text.strip().lower()
    if normalized in {c for _, c in LANG_CHOICES}:
        user_target_lang[uid] = normalized
        reply = make_reply_menu(normalized) if user_menu_on[uid] else None
        await update.message.reply_text(
            f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {normalized}",
            reply_markup=reply or make_inline_lang_keyboard(),
        )
        return
    if normalized.startswith("current:"):
        pass

    if not src_text:
        return

    try:
        translator = GoogleTranslator(source="auto", target=target)
        translated = translator.translate(src_text)

        reply_markup = make_inline_lang_keyboard()
        if user_menu_on[uid]:
            pass

        await update.message.reply_text(
            f"üó£Ô∏è ‚û°Ô∏è ({target})\n{translated}",
            reply_markup=reply_markup,
        )
    except Exception as e:
        logger.exception("Translation failed: %s", e)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ —è–∑—ã–∫ /setlang.",
            reply_markup=make_inline_lang_keyboard(),
        )


async def post_init(app: Application):
    logger.info("Bot launched.")


def main():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("setlang", setlang_cmd))
    application.add_handler(CommandHandler("langs", langs_cmd))
    application.add_handler(CommandHandler("menu", menu_on))
    application.add_handler(CommandHandler("menu_off", menu_off))
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    application.add_handler(CallbackQueryHandler(on_button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, translate_message))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()